From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: TreeKR <johanbag290@gmail.com>
Date: Mon, 8 Mar 2021 11:02:13 +0900
Subject: [PATCH] Cylic Dependency Fix


diff --git a/pom.xml b/pom.xml
index d10aa59d98320151c2685347fb6659b15b3bd2e6..b457b60250e47648d3392212f1e66c473c2b577c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,7 +1,7 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <modelVersion>4.0.0</modelVersion>
-    <artifactId>paper</artifactId>
+    <artifactId>kpaper</artifactId>
     <packaging>jar</packaging>
     <version>1.16.5-R0.1-SNAPSHOT</version>
     <name>KPaper</name>
@@ -251,7 +251,7 @@
                             <createSourcesJar>${shadeSourcesJar}</createSourcesJar>
                             <filters>
                                 <filter>
-                                    <artifact>io.papermc:minecraft-server</artifact>
+                                    <artifact>io.mc:minecraft-server</artifact>
                                     <excludes>
                                         <exclude>com/google/common/**</exclude>
                                         <exclude>com/google/gson/**</exclude>
diff --git a/src/main/java/xyz/alphakr/kpaper/KPaperConfig.java b/src/main/java/xyz/alphakr/kpaper/KPaperConfig.java
deleted file mode 100644
index 73eeabfbc89c6e557e2347c57b963c87298b5213..0000000000000000000000000000000000000000
--- a/src/main/java/xyz/alphakr/kpaper/KPaperConfig.java
+++ /dev/null
@@ -1,141 +0,0 @@
-package xyz.alphakr.kpaper;
-
-import com.google.common.base.Throwables;
-import org.bukkit.Bukkit;
-import org.bukkit.command.Command;
-import org.bukkit.configuration.InvalidConfigurationException;
-import org.bukkit.configuration.file.YamlConfiguration;
-
-import java.io.File;
-import java.io.IOException;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.util.List;
-import java.util.Map;
-import java.util.logging.Level;
-
-public class KPaperConfig {
-    private static File CONFIG_FILE;
-    private static final String HEADER = "KPaper을 사용해주셔서 감사합니다!\n" +
-            "이것은 KPaper의 설정 파일입니다.\n" +
-            "KPaper에 대한 설정을 하실수 있습니다.\n" +
-            "\n" +
-            "KPaper 서포트 서버: https://discord.gg/azYU6GU\n" +
-            "\n" +
-            "Made by norhu1130(Dev-Star) and NamuTree0345";
-    /*========================================================================*/
-    public static YamlConfiguration config;
-    static int version;
-    static Map<String, Command> commands;
-    public static boolean verbose;
-    public static boolean pluginsCommandEnabledOnlyForOp;
-    public static boolean handSwingDisabled;
-    private static boolean fatalError;
-    /*========================================================================*/
-    private static boolean metricsStarted;
-
-    public static void init(File configFile) {
-        CONFIG_FILE = configFile;
-        config = new YamlConfiguration();
-        try {
-            config.load(CONFIG_FILE);
-        } catch (IOException ex) {
-        } catch (InvalidConfigurationException ex) {
-            Bukkit.getLogger().log(Level.SEVERE, "kpaper.yml을 불러오지 못했습니다. YML 문법을 확인해주세요.", ex);
-            throw Throwables.propagate(ex);
-        }
-        config.options().header(HEADER);
-        config.options().copyDefaults(true);
-        verbose = getBoolean("verbose", false);
-        pluginsCommandEnabledOnlyForOp = getBoolean("pluginsCommandEnabledOnlyForOp", true);
-        handSwingDisabled = getBoolean("handSwingDisabled", true);
-
-        version = getInt("config-version", 20);
-        set("config-version", 20);
-        readConfig(KPaperConfig.class, null);
-    }
-
-    static void readConfig(Class<?> clazz, Object instance) {
-        for (Method method : clazz.getDeclaredMethods()) {
-            if (Modifier.isPrivate(method.getModifiers())) {
-                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
-                    try {
-                        method.setAccessible(true);
-                        method.invoke(instance);
-                    } catch (InvocationTargetException ex) {
-                        throw Throwables.propagate(ex.getCause());
-                    } catch (Exception ex) {
-                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
-                    }
-                }
-            }
-        }
-
-        try {
-            config.save(CONFIG_FILE);
-        } catch (IOException ex) {
-            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
-        }
-    }
-
-    protected static void logError(String s) {
-        Bukkit.getLogger().severe(s);
-    }
-
-    protected static void fatal(String s) {
-        fatalError = true;
-        throw new RuntimeException("심각한 kpaper.yml 오류: " + s);
-    }
-
-    protected static void log(String s) {
-        if (verbose) {
-            Bukkit.getLogger().info(s);
-        }
-    }
-
-    private static void set(String path, Object val) {
-        config.set(path, val);
-    }
-
-    private static boolean getBoolean(String path, boolean def) {
-        config.addDefault(path, def);
-        return config.getBoolean(path, config.getBoolean(path));
-    }
-
-    private static double getDouble(String path, double def) {
-        config.addDefault(path, def);
-        return config.getDouble(path, config.getDouble(path));
-    }
-
-    private static float getFloat(String path, float def) {
-        // TODO: Figure out why getFloat() always returns the default value.
-        return (float) getDouble(path, (double) def);
-    }
-
-    private static int getInt(String path, int def) {
-        config.addDefault(path, def);
-        return config.getInt(path, config.getInt(path));
-    }
-
-    private static <T> List getList(String path, T def) {
-        config.addDefault(path, def);
-        return (List<T>) config.getList(path, config.getList(path));
-    }
-
-    private static String getString(String path, String def) {
-        config.addDefault(path, def);
-        return config.getString(path, config.getString(path));
-    }
-
-    /*
-    public static int packetInSpamThreshold = 300;
-    private static void packetInSpamThreshold() {
-        if (version < 11) {
-            int oldValue = getInt("settings.play-in-use-item-spam-threshold", 300);
-            set("settings.incoming-packet-spam-threshold", oldValue);
-        }
-        packetInSpamThreshold = getInt("settings.incoming-packet-spam-threshold", 300);
-    }
-     */
-}
