From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: norhu1130 <norhu1130@naver.com>
Date: Tue, 26 Jan 2021 19:55:16 +0900
Subject: [PATCH] Korean Lang


diff --git a/src/main/java/io/papermc/paper/util/PaperJvmChecker.java b/src/main/java/io/papermc/paper/util/PaperJvmChecker.java
index c6ea429819c07e7f4bc257cad73463a030767825..784f0ac5230badd14b420267a528d71302cf4245 100644
--- a/src/main/java/io/papermc/paper/util/PaperJvmChecker.java
+++ b/src/main/java/io/papermc/paper/util/PaperJvmChecker.java
@@ -29,19 +29,19 @@ public class PaperJvmChecker {
         if (getJvmVersion() < 11) {
             final Logger logger = LogManager.getLogger();
             logger.warn("************************************************************");
-            logger.warn("* WARNING - YOU ARE RUNNING AN OUTDATED VERSION OF JAVA.");
-            logger.warn("* PAPER WILL STOP BEING COMPATIBLE WITH THIS VERSION OF");
-            logger.warn("* JAVA WHEN MINECRAFT 1.17 IS RELEASED.");
+            logger.warn("* 경고 - 구버전 자바를 실행하고 있습니다.");
+            logger.warn("* KPAPER는 1.17버전 부터는 자바 11이상을 지원합니다.");
+            logger.warn("* ");
             logger.warn("*");
-            logger.warn("* Please update the version of Java you use to run Paper");
-            logger.warn("* to at least Java 11. When Paper for Minecraft 1.17 is");
-            logger.warn("* released support for versions of Java before 11 will");
+            logger.warn("* 지금 자바 11이상으로 업데이트 해주시기 바랍니다.");
+            logger.warn("* ");
+            /*logger.warn("* released support for versions of Java before 11 will");
             logger.warn("* be dropped.");
+            */logger.warn("*")
+            logger.warn("* 현재 버전: {}", System.getProperty("java.version"));
             logger.warn("*");
-            logger.warn("* Current Java version: {}", System.getProperty("java.version"));
-            logger.warn("*");
-            logger.warn("* Check this forum post for more information: ");
-            logger.warn("*   https://papermc.io/java11");
+            /*logger.warn("* Check this forum post for more information: ");
+            logger.warn("*   https://papermc.io/java11");*/
             logger.warn("************************************************************");
         }
     }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index afbc8b76398f78a83c63e208a241bd45b9ccf91f..f948e918ea783ba9aa1aa18749bd3ed7a3faaafd 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -946,14 +946,14 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
 
                 // Spigot start
                 // Paper start - move done tracking
-                LOGGER.info("Running delayed init tasks");
+                //LOGGER.info("Running delayedi init tasks");
                 this.server.getScheduler().mainThreadHeartbeat(this.ticks); // run all 1 tick delay tasks during init,
                 // this is going to be the first thing the tick process does anyways, so move done and run it after
                 // everything is init before watchdog tick.
                 // anything at 3+ won't be caught here but also will trip watchdog....
                 // tasks are default scheduled at -1 + delay, and first tick will tick at 1
                 String doneTime = String.format(java.util.Locale.ROOT, "%.3fs", (double) (SystemUtils.getMonotonicNanos() - serverStartTime) / 1.0E9D);
-                LOGGER.info("Done ({})! For help, type \"help\"", doneTime);
+                LOGGER.info("부팅 완료 ({})! ", doneTime);
                 // Paper end
 
                 PaperJvmChecker.checkJvm(); // Paper jvm version nag
@@ -969,7 +969,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                         long j = i / 50L;
 
                         if (server.getWarnOnOverload()) // CraftBukkit
-                            MinecraftServer.LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
+                            //MinecraftServer.LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
                         this.nextTick += j * 50L;
                         this.lastOverloadTime = this.nextTick;
                     }
@@ -1455,7 +1455,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     }
 
     public String getServerModName() {
-        return "Paper"; //Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
+        return "KPaper"; //Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
     }
 
     public CrashReport b(CrashReport crashreport) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index e9d6db022f196bf98ecc7c80bf34ae54cddd1126..ac1ad5ea2c9135c3414f63268a51a179958c0f74 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -389,7 +389,7 @@ public final class CraftServer implements Server {
             Plugin[] plugins = pluginManager.loadPlugins(pluginFolder);
             for (Plugin plugin : plugins) {
                 try {
-                    String message = String.format("Loading %s", plugin.getDescription().getFullName());
+                    //String message = String.format("Load %s", plugin.getDescription().getFullName());
                     plugin.getLogger().info(message);
                     plugin.onLoad();
                 } catch (Throwable ex) {
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 99bc7961690999fc64ecafb6730f080aecc78cfc..1c834b3e72080b7c190829580b14961208c538b0 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -262,17 +262,17 @@ public class Main {
                 // Paper start - Log Java and OS versioning to help with debugging plugin issues
                 java.lang.management.RuntimeMXBean runtimeMX = java.lang.management.ManagementFactory.getRuntimeMXBean();
                 java.lang.management.OperatingSystemMXBean osMX = java.lang.management.ManagementFactory.getOperatingSystemMXBean();
-                if (runtimeMX != null && osMX != null) {
+                /*if (runtimeMX != null && osMX != null) {
                     String javaInfo = "Java " + runtimeMX.getSpecVersion() + " (" + runtimeMX.getVmName() + " " + runtimeMX.getVmVersion() + ")";
                     String osInfo = "Host: " + osMX.getName() + " " + osMX.getVersion() + " (" + osMX.getArch() + ")";
 
                     System.out.println("System Info: " + javaInfo + " " + osInfo);
                 } else {
                     System.out.println("Unable to read system info");
-                }
+                }*/
                 // Paper end
-                System.setProperty( "library.jansi.version", "Paper" ); // Paper - set meaningless jansi version to prevent git builds from crashing on Windows
-                System.out.println("Loading libraries, please wait...");
+                System.setProperty( "library.jansi.version", "KPaper" ); // Paper - set meaningless jansi version to prevent git builds from crashing on Windows
+                System.out.println("라이브러리 로딩 중...");
                 net.minecraft.server.Main.main(options);
             } catch (Throwable t) {
                 t.printStackTrace();
